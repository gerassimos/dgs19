buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		//mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.6.4")
		classpath ("com.palantir.gradle.docker:gradle-docker:0.32.0")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

def iotcTAG = findProperty('IOTC_TAG') ?: 'latest'
def dockerUsername = findProperty('DOCKER_USERNAME') ?: 'username'

group = 'com.gmos.iot-c'
version = "${iotcTAG}"
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

docker {
	dependsOn build
	name "iot-${bootJar.archiveBaseName.get()}:${iotcTAG}"
	tag 'tag1', "${dockerUsername}/iot-${bootJar.archiveBaseName.get()}:${iotcTAG}"
	tag 'tag2', "anOtherRepository"
//	files bootJar.archiveFile.get()
	files bootJar.archiveFile.get(), '../utils/otel/opentelemetry-javaagent.jar'
	buildArgs(['JAR_FILE': "${bootJar.archiveFileName.get()}", 'IOTC_TAG': "${version}"])
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('io.micrometer:micrometer-registry-prometheus')
	implementation(group: 'io.opentracing.contrib', name: 'opentracing-spring-jaeger-web-starter', version: '3.3.1')
	implementation(group: 'io.opentracing.contrib', name: 'opentracing-spring-cloud-starter', version: '0.5.9')
	implementation('org.postgresql:postgresql')
	runtimeOnly('com.h2database:h2')
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation(project(":common"))
	implementation(project(":common-grpc"))
	implementation("net.devh:grpc-server-spring-boot-starter:2.13.1.RELEASE")

	println("iotcTAG ${iotcTAG}")
	println("version ${version}")
	println("project.name ${project.name}")

	println("archiveBaseName ${bootJar.archiveBaseName.get()}")
	println("archiveExtension ${bootJar.archiveExtension.get()}")
	println("archiveFile jar abs-path ${bootJar.archiveFile.get()}")
	println("archiveName jar simple-name ${bootJar.archiveName}")
	println("archiveName jar simple-name ${bootJar.archiveFileName.get()}")
	println("name1 ${project.name}/${bootJar.baseName}:${iotcTAG}")
	println("name2 ${project.parent.name}")
	println("name3 iot-${bootJar.archiveBaseName.get()}:${iotcTAG}")

}
